//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Packages_com.unity.ugui_Runtime_EventSystem_InputModules_New Controls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Packages_comunityugui_Runtime_EventSystem_InputModules_NewControls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Packages_comunityugui_Runtime_EventSystem_InputModules_NewControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Packages_com.unity.ugui_Runtime_EventSystem_InputModules_New Controls"",
    ""maps"": [
        {
            ""name"": ""MovementSx"",
            ""id"": ""56e8ec1e-f617-4185-968d-cf27074e245c"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""55d851c6-024d-450d-81ac-01559beb3dea"",
                    ""expectedControlType"": ""Stick"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""ac2f0d1c-02a7-4be2-a3f1-fe22075fa50d"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""8e102628-c1bb-46e9-a35d-1d82b697a4c1"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""f830af30-24dc-44c7-a265-68849d007570"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""f994e198-1047-4afe-b5ee-67a589f5c6f5"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""eb16e415-05a2-40a3-bf9f-777228768522"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""51832930-9b2f-43b0-92ae-847790f4dba3"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""MovementDx"",
            ""id"": ""92f0d73a-0555-4a97-aee7-52171daef507"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""abcc0ac6-8721-4cbe-aab1-8c71ab0b2754"",
                    ""expectedControlType"": ""Stick"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""57405495-7b29-45e9-bf00-b1c0e97a6f77"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""32b0a512-ea75-4f6e-8493-c9ec0e147fbf"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""985036af-8ece-460a-a3e7-de5ef8213468"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""f6ebfc03-cd91-4453-8771-61a0f3e86b81"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""af479ec9-38c1-4ea5-a82e-f64d45c08692"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""ce728e32-af31-4c78-bbb5-ac8e2029a35f"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // MovementSx
        m_MovementSx = asset.FindActionMap("MovementSx", throwIfNotFound: true);
        m_MovementSx_Move = m_MovementSx.FindAction("Move", throwIfNotFound: true);
        // MovementDx
        m_MovementDx = asset.FindActionMap("MovementDx", throwIfNotFound: true);
        m_MovementDx_Move = m_MovementDx.FindAction("Move", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // MovementSx
    private readonly InputActionMap m_MovementSx;
    private List<IMovementSxActions> m_MovementSxActionsCallbackInterfaces = new List<IMovementSxActions>();
    private readonly InputAction m_MovementSx_Move;
    public struct MovementSxActions
    {
        private @Packages_comunityugui_Runtime_EventSystem_InputModules_NewControls m_Wrapper;
        public MovementSxActions(@Packages_comunityugui_Runtime_EventSystem_InputModules_NewControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_MovementSx_Move;
        public InputActionMap Get() { return m_Wrapper.m_MovementSx; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MovementSxActions set) { return set.Get(); }
        public void AddCallbacks(IMovementSxActions instance)
        {
            if (instance == null || m_Wrapper.m_MovementSxActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_MovementSxActionsCallbackInterfaces.Add(instance);
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
        }

        private void UnregisterCallbacks(IMovementSxActions instance)
        {
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
        }

        public void RemoveCallbacks(IMovementSxActions instance)
        {
            if (m_Wrapper.m_MovementSxActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IMovementSxActions instance)
        {
            foreach (var item in m_Wrapper.m_MovementSxActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_MovementSxActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public MovementSxActions @MovementSx => new MovementSxActions(this);

    // MovementDx
    private readonly InputActionMap m_MovementDx;
    private List<IMovementDxActions> m_MovementDxActionsCallbackInterfaces = new List<IMovementDxActions>();
    private readonly InputAction m_MovementDx_Move;
    public struct MovementDxActions
    {
        private @Packages_comunityugui_Runtime_EventSystem_InputModules_NewControls m_Wrapper;
        public MovementDxActions(@Packages_comunityugui_Runtime_EventSystem_InputModules_NewControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_MovementDx_Move;
        public InputActionMap Get() { return m_Wrapper.m_MovementDx; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MovementDxActions set) { return set.Get(); }
        public void AddCallbacks(IMovementDxActions instance)
        {
            if (instance == null || m_Wrapper.m_MovementDxActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_MovementDxActionsCallbackInterfaces.Add(instance);
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
        }

        private void UnregisterCallbacks(IMovementDxActions instance)
        {
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
        }

        public void RemoveCallbacks(IMovementDxActions instance)
        {
            if (m_Wrapper.m_MovementDxActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IMovementDxActions instance)
        {
            foreach (var item in m_Wrapper.m_MovementDxActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_MovementDxActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public MovementDxActions @MovementDx => new MovementDxActions(this);
    public interface IMovementSxActions
    {
        void OnMove(InputAction.CallbackContext context);
    }
    public interface IMovementDxActions
    {
        void OnMove(InputAction.CallbackContext context);
    }
}
